<%
    const [mainVal, mainValType] = ((option) => {
        switch(option){
            case 'readOne':
                return(['documentSnapshot', 'DocumentSnapshot<' + func.FuncID + func.FuncName + 'Interface>']);
            case 'readArray':
                return(['querySnapshot', 'QuerySnapshot<' + func.FuncID + func.FuncName + 'Interface>']);
            case 'readMap':
                return(['documentSnapshots', '{[id:string]: QueryDocumentSnapshot<' + func.FuncID + func.FuncName + 'Interface>}']);
        }
    })(option);
-%>
import { ActivityIndicator } from 'react-native-paper';
import { useState, createContext, useEffect, ReactNode } from 'react';
import db from '@/<%- func.ServiceName %>/Endpoint/firestore'
import { collection, doc, query, QuerySnapshot, onSnapshot, addDoc, DocumentReference, DocumentSnapshot, QueryDocumentSnapshot } from 'firebase/firestore';
import { <%- table.t_id %><%- table.t_name %>Cols, collectionName, <%- table.t_id %><%- table.t_name %>Interface } from '@/<%- func.ServiceName %>/Models/<%- table.t_id %><%- table.t_name %>'
import { <%- func.FuncID %><%- func.FuncName %>Interface } from './<%- func.FuncName %>Interface';
import { <%- func.FuncID %><%- func.FuncName %>Converter } from './<%- func.FuncName %>Converter';
import { <%- func.FuncID %><%- func.FuncName %>Build } from './<%- func.FuncName %>Build';

/**
 * Define value interface of useContext(<%- func.FuncID %><%- func.FuncName %>). 
 */
interface <%- func.FuncID %><%- func.FuncName %>ValInterface {
    <%- mainVal %>: <%- mainValType %>;
    create: () => Promise<DocumentReference>;
}
export const <%- func.FuncID %><%- func.FuncName %> = createContext({} as <%- func.FuncID %><%- func.FuncName %>ValInterface);

/**
 * Export Provider of <%- func.FuncID %><%- func.FuncName %>. 
 */
interface <%- func.FuncID %><%- func.FuncName %>ProviderPropsInterface {
    parentDocRef?: DocumentReference;
    children: ReactNode;
<% if(option === 'readOne'){ -%>
    id: string;
<% } -%>
}
export const <%- func.FuncID %><%- func.FuncName %>Provider = ({
    parentDocRef,
    children,
<% if(option === 'readOne'){ -%>
    id,
<% } -%>
}: <%- func.FuncID %><%- func.FuncName %>ProviderPropsInterface) => {
    
    const [<%- mainVal %>, set<%- mainVal[0].toUpperCase() + mainVal.slice(1) %>] = useState<<%- func.FuncID %><%- func.FuncName %>ValInterface['<%- mainVal %>']<% if(option!=="readMap"){ -%> | null<% } -%>>(<%- option!=="readMap" ? 'null' : '{}' %>);
    
    const collectionRef = parentDocRef
        ?   collection(parentDocRef, collectionName).withConverter(<%- func.FuncID %><%- func.FuncName %>Converter())
        :   collection(db, collectionName).withConverter(<%- func.FuncID %><%- func.FuncName %>Converter());

    useEffect(() => {
        const fetchData = async () => {
            const unsubscribe = onSnapshot(
<%- include('./'  + option + '/_onSnapshot', {func:func}) %>
            );
        }
        fetchData();
    }, [parentDocRef<% if(option==="readOne"){ -%>, id<% } -%>]);

    const create: <%- func.FuncID %><%- func.FuncName %>ValInterface['create'] = async () => {
        return await addDoc<<%- func.FuncID %><%- func.FuncName %>Interface>(collectionRef, <%- func.FuncID %><%- func.FuncName %>Build());
    }

    if (!<%- mainVal %>) {
        return <ActivityIndicator animating={true} />
    }
    
    const value: <%- func.FuncID %><%- func.FuncName %>ValInterface = {
        <%- mainVal %>,
        create,
    }
    return <<%- func.FuncID %><%- func.FuncName %>.Provider value={value}>{children}</<%- func.FuncID %><%- func.FuncName %>.Provider>
};
